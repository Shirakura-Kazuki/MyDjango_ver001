C:\Users\s_k_t\Django\myDJ\helloApp
```python
# helloApp\management\commands\superuser.py
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.conf import settings

User = get_user_model()


class Command(BaseCommand):
  def handle(self, *args, **options):
    if not User.objects.filter(username=settings.SUPERUSER_NAME).exists():
      User.objects.create_superuser(
          username=settings.SUPERUSER_NAME,
          email=settings.SUPERUSER_EMAIL,
          password=settings.SUPERUSER_PASSWORD
      )
      print("スーパーユーザー作成")
...

```python
# helloApp\templates\add_item.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Add a New Item</h1>
    <form method="POST">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Save</button>
    </form>
</body>
</html>
...

```python
# helloApp\templates\edit_item.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Item</title>
</head>
<body>
    <h1>Edit Item</h1>
    <form method="POST">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Update</button>
    </form>
</body>
</html>

...

```python
# helloApp\templates\home.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Item List</title>
</head>
<body>
    <h1>Items</h1>
    <form method="GET" action=".">
        <input type="text" name="q" value="{{ query|default:'' }}" placeholder="Search items...">
        <button type="submit">Search</button>
    </form>
    
    <ul>
        {% for item in page_obj %}
            <li>{{ item.name }} - {{ item.price }} yen</li>
        {% endfor %}
    </ul>

    <div>
        <!-- 前ページへ： 前のページがあるのかチェックし、存在するのならば前ページの番号を取得-->
        {% if page_obj.has_previous %}  <!-- True or False-->
        <a href="?q={{ query }}&page={{ page_obj.previous_page_number }}">Previous</a>
            <!-- previous_page_number：メソッド：前のページ番号取得 -->
        {% endif %}

        <!-- 現在のページ番号と全ページ数を表示： Page 1 of 2 Next-->
        Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}
        <!-- .number：現在のページ番号の取得 .paginator.num_pages：全ページ数を取得-->

        <!-- 次ページへ  -->
        {% if page_obj.has_next %}
        <a href="?q={{ query }}&page={{ page_obj.next_page_number }}">Next</a>
        {% endif %}
    </div>

</body>
</html>
...

```python
# C:\Users\s_k_t\Django\myDJ\helloApp\admin.py
from django.contrib import admin
from .models import Item

admin.site.register(Item)
...

```python
# C:\Users\s_k_t\Django\myDJ\helloApp\apps.py
from django.apps import AppConfig


class HelloappConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'helloApp'
...

```python
# C:\Users\s_k_t\Django\myDJ\helloApp\forms.py
from django import forms
from .models import Item

class ItemForm(forms.ModelForm):
    class Meta:
        model = Item  # どのモデルを使うか指定
        fields = ['name', 'price', 'description']  # 入力フィールドを指定
...
```python
# C:\Users\s_k_t\Django\myDJ\helloApp\models.py
from django.db import models

class Item(models.Model):
    name = models.CharField(max_length=100)  # 商品名
    price = models.IntegerField()  # 価格
    description = models.TextField()  # 説明

    def __str__(self):
        return self.name
...

```python
# C:\Users\s_k_t\Django\myDJ\helloApp\urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('',views.item_list , name='item_list'),    # home.html
    path('add/', views.add_item, name='add_item'),  # add_item.html
    path('edit/<int:item_id>/', views.edit_item, name='edit_item'), # edit_item.html
]

```

```python
# C:\Users\s_k_t\Django\myDJ\helloApp\views.py
from django.shortcuts import render , redirect ,get_object_or_404
from django.core.paginator import Paginator

from .models import Item
from .forms import ItemForm

# アイテムテーブルの全てを表示（ページ送り・検索）
def item_list(request):
    query = request.GET.get('q', '').strip()  # 検索クエリを取得(デフォルト値：''空文字設定)、.strip()：余分な空白や改行を削除する
    if query:
        Items = Item.objects.filter(name__icontains=query)  # 部分一致検索
    else:
        Items = Item.objects.all()  #全てのデータ取得
    paginator = Paginator(Items, 5)  # 1ページあたり5件表示
    page_number = request.GET.get('page')  # 現在のページ番号を取得
    page_obj = paginator.get_page(page_number)  # 現在のページのデータを取得
    return render(request,'home.html' ,{'page_obj':page_obj , 'query': query} ) 

# 入力フォーム：データベースに追加する入力フォーム
def add_item(request):
    if request.method == 'POST':
        form = ItemForm(request.POST)
        if form.is_valid():
            form.save()  # データベースに保存
            return redirect('item_list')  # データ保存後、一覧ページにリダイレクト
    else:
        form = ItemForm()
    return render(request, 'add_item.html', {'form': form})

# 編集フォーム：データベースのデータの編集・上書き
def edit_item(request, item_id):
    item = get_object_or_404(Item, id=item_id)  # 編集対象のデータを取得
    if request.method == 'POST':
        form = ItemForm(request.POST, instance=item)
        if form.is_valid():
            form.save()  # データを更新
            return redirect('item_list')  # 更新後、一覧ページにリダイレクト
    else:
        form = ItemForm(instance=item)  # 既存データをフォームに表示
    return render(request, 'edit_item.html', {'form': form})


...


C:\Users\s_k_t\Django\myDJ\myDJ
```python
# C:\Users\s_k_t\Django\myDJ\myDJ\asgi.py
"""
ASGI config for myDJ project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myDJ.settings')

application = get_asgi_application()

...

```python
# C:\Users\s_k_t\Django\myDJ\myDJ\settings.py
"""
Django settings for myDJ project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import environ
from decouple import config
from dj_database_url import parse as dburl

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# 環境変数を使用する
env = environ.Env()
env.read_env(os.path.join(BASE_DIR, ".env"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-l+6^9%f=&7e_z3@nouzh$qhwy9=a&&-$rx!547e0+#u!9%2e*!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
# ALLOWED_HOSTS = ['card-game-app.onrender.com']



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 今回作成したアプリ
    'helloApp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'myDJ.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myDJ.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# ローカルのデータベースの定義
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

default_dburl = "sqlite:///" + str(BASE_DIR / "db.sqlite3")

DATABASES = {
    "default": config("DATABASE_URL", default=default_dburl, cast=dburl),
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# # STATIC_URL = 'static/'
# STATIC_URL = '/static/'
# STATIC_ROOT = BASE_DIR / 'staticfiles'
STATIC_URL = "static/"
STATIC_ROOT = str(BASE_DIR / "staticfiles")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SUPERUSER_NAME = env("SUPERUSER_NAME")
SUPERUSER_EMAIL = env("SUPERUSER_EMAIL")
SUPERUSER_PASSWORD = env("SUPERUSER_PASSWORD")

...

```python
# C:\Users\s_k_t\Django\myDJ\myDJ\urls.py
from django.contrib import admin
from django.urls import path , include
from django.http import HttpResponse
from django.shortcuts import render

def home(request):
    return render(request, 'home.html')

urlpatterns = [
    path('', home, name='home'),  # トップページの設定
    path('admin/', admin.site.urls),
    path('hello/', include('helloApp.urls')),
]

...

```python
# C:\Users\s_k_t\Django\myDJ\myDJ\wsgi.py
"""
WSGI config for myDJ project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myDJ.settings')

application = get_wsgi_application()


...



```python
# C:\Users\s_k_t\Django\myDJ\.gitignore
db.sqlite3
myvenv
__pycache__
...

```python
# C:\Users\s_k_t\Django\myDJ\manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myDJ.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

...

```python
# Procfile
web: gunicorn myDJ.wsgi:application
...

```python
# render.yaml
databases:
  - name: django_render_db
    databaseName: django_render_db
    user: django_user
    region: singapore
    plan: free

services:
  - type: web
    name: django_render
    env: python
    region: singapore
    plan: free
    branch: main
    healthCheckPath: /
    buildCommand: "./build.sh"
    startCommand: "gunicorn myDJ.wsgi:application"
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: django_render_db
          property: connectionString
      - key: SECRET_KEY
        generateValue: true
      - key: WEB_CONCURRENCY
        value: 4
    autoDeploy: true

...

```python
# C:\Users\s_k_t\Django\myDJ\requirements.txt
django-environ
python-decouple
dj-database-url

...

```python
# C:\Users\s_k_t\Django\myDJ\runtime.txt
python-3.11.3
...